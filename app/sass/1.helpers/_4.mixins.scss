// Media Queries
	@mixin resp-min($breakpoint, $breakpoints: $breakpoints){
		$value: map-get($breakpoints,$breakpoint);
		@if $value != null  {
			@media (min-width: $value ) {
				@content;
			}
		}@else{
			 @error $error-variable + " #{$breakpoint}";
		}
	}
	@mixin resp-max($breakpoint, $breakpoints: $breakpoints){
		$value: map-get($breakpoints,$breakpoint);
		@if $value != null { 
			@media (max-width: $value - 1px) {
				@content;
			} 
		}@else{
			 @error $error-variable + " #{$breakpoint}";
		}
	}


// Grid

	// Columns(flex, float)
		@mixin flexColumnWidth($value){
			flex-basis: $value;
			max-width: $value;
		}
		@mixin make-column($class: null,$push: "push",$pull: "pull",$offset: "offset"){
			@for $i from 1 through getComp(columns){
				$defaultValue: ( getComp(width)/getComp(columns) ) * $i;
				@if getComp(flex) == true{     
					@if $class != null {
						.#{getComp(columnName)}-#{$class}-#{$i}{
							@include flexColumnWidth($defaultValue);
						}
					}@else{
						.#{getComp(columnName)}-#{$i}{
							@include flexColumnWidth($defaultValue);
						}
					}
				}@else{
					@if $class != null {
						.#{$class}-#{$i}{
							width: $defaultValue;
						}      
					}
					@if $push == "push" {
						.#{$class}-push-#{$i}{
							left: $defaultValue;
						}      
					}
					@if $pull == "pull" {
						.#{$class}-pull-#{$i}{
							right: $defaultValue;
						}
					}
					@if $offset == "offset" {
						.#{$class}-offset-#{$i}{
							margin-left: $defaultValue;
						}
					}
				}
			}
		}

	// Clearfix.
		@mixin cf(){
			&:after, &:before{
				content: "";
				display: table;
			}
			&:after{
				clear: both;
			}
		}

	// Hide and show elements.
		@mixin visibility($visibility){
			.vhidden-#{$visibility}{
				display: none !important;
			}
			.vvisible-#{$visibility}{
				display: block !important;
			}
		}
	
	// Offset
		@mixin xOffset($gn, $gl, $gr: $gl){
			#{$gn}-left: $gl;
			#{$gn}-right: $gr;
		}

// Connect fonts
@mixin connect-font($font,$class_name: $font, $fileType: otf){
	@font-face{
		font-family: $font;
		src: local("#{$font}"), 
		url(../fonts/#{$font}.#{$fileType});
	}
	@if $class_name != null{
		.#{$class_name}{
			font-family: $font;
		}
	}@else{
		.#{$font}{
			font-family: $font;
		}
	}
}

// Миксин, который будет брать размеры шрифтов с карты($sizes)
@mixin fs($fs-map, $fs-breakpoints: $breakpoints){
	$fs-map: map-get($sizes, $fs-map);
	@each $fs-breakpoint, $fs-font-size in $fs-map{
		$fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
		@if $fs-breakpoint != null{
			@media (min-width: $fs-breakpoint){
				font-size: $fs-font-size;
			}
		}@else{
			@error 'No size';
		} 
	}
}

// Миксин, позволяющий загружать картинки
@mixin bg($url, $pos: 0 0, $repeat: no-repeat, $size: cover){
	background: url('#{$url}') $pos $repeat;
	background-size: $size;
}


// Retina devices
@mixin retina(){
	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi){
		@content;
	}
}

// Pseudo elements
@mixin pseudo($contentText: ""){
	content: $contentText;
	position: absolute;
}

// Миксин для создание transition
@mixin transition($tr-prop: all, $tr-time: ease, $tr-dur: .5s){
	transition: $tr-prop $tr-time $tr-dur;
}

@mixin size($width, $height: $width){
	width: $width;
	height: $height;
}

@mixin placeholder {
	&:-moz-placeholder { @content; }
	&::-moz-placeholder { @content; }
	&:-ms-input-placeholder { @content; }
	&::-webkit-input-placeholder { @content; }
}

@mixin vertical-image($height){
	height: $height;
	&:before{
		content: "";
		display: inline-block;
		height: 100%;
		vertical-align: middle;   
	}
	img{
		max-height: 100%;
		vertical-align: middle;   
	}
}